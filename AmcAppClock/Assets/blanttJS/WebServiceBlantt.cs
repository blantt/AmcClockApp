//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:2.0.50727.5485
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by Web Services Description Language Utility
//Mono Framework v2.0.50727.5485
//


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="WebServiceBlanttSoap", Namespace="http://tempuri.org/")]
public partial class WebServiceBlantt : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback GetDataValueOperationCompleted;
    
    private System.Threading.SendOrPostCallback WebcallgetDataOperationCompleted;
    
    /// <remarks/>
    public WebServiceBlantt() {
        this.Url = "http://192.168.101.131/AppService/WebServiceBlantt.asmx";
    }
    
    /// <remarks/>
    public event GetDataValueCompletedEventHandler GetDataValueCompleted;
    
    /// <remarks/>
    public event WebcallgetDataCompletedEventHandler WebcallgetDataCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDataValue", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetDataValue() {
        object[] results = this.Invoke("GetDataValue", new object[0]);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetDataValueAsync() {
        this.GetDataValueAsync(null);
    }
    
    /// <remarks/>
    public void GetDataValueAsync(object userState) {
        if ((this.GetDataValueOperationCompleted == null)) {
            this.GetDataValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataValueOperationCompleted);
        }
        this.InvokeAsync("GetDataValue", new object[0], this.GetDataValueOperationCompleted, userState);
    }
    
    private void OnGetDataValueOperationCompleted(object arg) {
        if ((this.GetDataValueCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetDataValueCompleted(this, new GetDataValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WebcallgetData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataTable WebcallgetData(string sql) {
        object[] results = this.Invoke("WebcallgetData", new object[] {
                    sql});
        return ((System.Data.DataTable)(results[0]));
    }
    
    /// <remarks/>
    public void WebcallgetDataAsync(string sql) {
        this.WebcallgetDataAsync(sql, null);
    }
    
    /// <remarks/>
    public void WebcallgetDataAsync(string sql, object userState) {
        if ((this.WebcallgetDataOperationCompleted == null)) {
            this.WebcallgetDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWebcallgetDataOperationCompleted);
        }
        this.InvokeAsync("WebcallgetData", new object[] {
                    sql}, this.WebcallgetDataOperationCompleted, userState);
    }
    
    private void OnWebcallgetDataOperationCompleted(object arg) {
        if ((this.WebcallgetDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.WebcallgetDataCompleted(this, new WebcallgetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void GetDataValueCompletedEventHandler(object sender, GetDataValueCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetDataValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetDataValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void WebcallgetDataCompletedEventHandler(object sender, WebcallgetDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class WebcallgetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal WebcallgetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataTable Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataTable)(this.results[0]));
        }
    }
}
